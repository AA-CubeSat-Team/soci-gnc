%implements s6_b0_x95ec_Functions "C"

%function sunVector_test_jseconds2ymdhms_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T LMonth[12];
real_T T_1900;
real_T DayofYr;
real_T sum;
static const int8_T b[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
int32_T i;
for (i = 0; i < 12; i++) {
    LMonth[i] = b[i];
}
*Month = 0.0;
*JD = j_seconds / 86400.0 + 2.451545E+6;
*JC = (*JD - 2.451545E+6) / 36525.0;
DayofYr = floor((*JD - 2.4150195E+6) / 365.25);
*Year = 1900.0 + DayofYr;
T_1900 = (*JD - 2.4150195E+6) - (floor((((1900.0 + DayofYr) - 1900.0) - 1.0) * 0.25) + ((1900.0 + DayofYr) - 1900.0) * 365.0);
if (T_1900 < 1.0) {
    *Year = (1900.0 + DayofYr) - 1.0;
    T_1900 = (*JD - 2.4150195E+6) - (floor(((((1900.0 + DayofYr) - 1.0) - 1900.0) - 1.0) * 0.25) + (((1900.0 + DayofYr) - 1.0) - 1900.0) * 365.0);
}
if ((!rtIsInf(*Year)) && (!rtIsNaN(*Year))) {
    if (*Year == 0.0) {
        DayofYr = 0.0;
    } else {
        DayofYr = fmod(*Year, 4.0);
        if (DayofYr == 0.0) {
            DayofYr = 0.0;
        } else {
            if (*Year < 0.0) {
                DayofYr += 4.0;
            }
        }
    }
} else {
    DayofYr = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
}
if (DayofYr == 0.0) {
    LMonth[1] = 29;
}
DayofYr = floor(T_1900);
for (sum = 0.0; sum < DayofYr; sum += (real_T)LMonth[(int32_T)*Month - 1]) {
    (*Month)++;
}
*Day = DayofYr - (sum - (real_T)LMonth[(int32_T)*Month - 1]);
T_1900 = (T_1900 - DayofYr) * 24.0;
*h = floor(T_1900);
T_1900 -= *h;
*b_min = floor(T_1900 * 60.0);
*s = (T_1900 - *b_min / 60.0) * 3600.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void sunVector_test_jseconds2ymdhms(\
%assign comma = ""
%<comma>real_T j_seconds\
%assign comma = ", "
%<comma>real_T *Year\
%assign comma = ", "
%<comma>real_T *Month\
%assign comma = ", "
%<comma>real_T *Day\
%assign comma = ", "
%<comma>real_T *h\
%assign comma = ", "
%<comma>real_T *b_min\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *JC\
%assign comma = ", "
%<comma>real_T *JD\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function sunVector_test_mod_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T r;
if ((!rtIsInf(x)) && (!rtIsNaN(x))) {
    if (x == 0.0) {
        r = 0.0;
    } else {
        r = fmod(x, 360.0);
        if (r == 0.0) {
            r = 0.0;
        } else {
            if (x < 0.0) {
                r += 360.0;
            }
        }
    }
} else {
    r = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
}
return r;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T sunVector_test_mod(\
%assign comma = ""
%<comma>real_T x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_remd_snf_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T q;
if (rtIsNaN(u0) || rtIsInf(u0) || (rtIsNaN(u1) || rtIsInf(u1))) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if ((u1 != 0.0) && (u1 != trunc(u1))) {
    q = fabs(u0 / u1);
    if (fabs(q - floor(q + 0.5)) <= DBL_EPSILON * q) {
        y = 0.0 * u0;
    } else {
        y = fmod(u0, u1);
    }
} else {
    y = fmod(u0, u1);
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_remd_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function sunVector_test_sind_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T n;
real_T c_x;
real_T absx;
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,3,0,0)
%<SLibCG_AccessArg(0 ,3, 0)>
%endif

if (rtIsInf(*x) || rtIsNaN(*x)) {
    c_x = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
    c_x = %<(SLibCGCallSubFcn("rt_remd_snf", ["*x", "360.0"], 0, 3, 0))>;
    absx = fabs(c_x);
    if (absx > 180.0) {
        if (c_x > 0.0) {
            c_x -= 360.0;
        } else {
            c_x += 360.0;
        }
        absx = fabs(c_x);
    }
    if (absx <= 45.0) {
        c_x *= 0.017453292519943295;
        c_x = sin(c_x);
    } else {
        if (absx <= 135.0) {
            if (c_x > 0.0) {
                c_x = (c_x - 90.0) * 0.017453292519943295;
                n = 1;
            } else {
                c_x = (c_x + 90.0) * 0.017453292519943295;
                n = -1;
            }
        } else if (c_x > 0.0) {
            c_x = (c_x - 180.0) * 0.017453292519943295;
            n = 2;
        } else {
            c_x = (c_x + 180.0) * 0.017453292519943295;
            n = -2;
        }
        if (n == 1) {
            c_x = cos(c_x);
        } else if (n == -1) {
            c_x = -cos(c_x);
        } else {
            c_x = -sin(c_x);
        }
    }
}
*x = c_x;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void sunVector_test_sind(\
%assign comma = ""
%<comma>real_T *x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function sunVector_test_cosd_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T n;
real_T b_x;
real_T absx;
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,4,0,0)
%<SLibCG_AccessArg(0 ,4, 0)>
%endif

if (rtIsInf(*x) || rtIsNaN(*x)) {
    *x = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
    b_x = %<(SLibCGCallSubFcn("rt_remd_snf", ["*x", "360.0"], 0, 4, 0))>;
    absx = fabs(b_x);
    if (absx > 180.0) {
        if (b_x > 0.0) {
            b_x -= 360.0;
        } else {
            b_x += 360.0;
        }
        absx = fabs(b_x);
    }
    if (absx <= 45.0) {
        b_x *= 0.017453292519943295;
        *x = cos(b_x);
    } else {
        if (absx <= 135.0) {
            if (b_x > 0.0) {
                b_x = (b_x - 90.0) * 0.017453292519943295;
                n = 1;
            } else {
                b_x = (b_x + 90.0) * 0.017453292519943295;
                n = -1;
            }
        } else if (b_x > 0.0) {
            b_x = (b_x - 180.0) * 0.017453292519943295;
            n = 2;
        } else {
            b_x = (b_x + 180.0) * 0.017453292519943295;
            n = -2;
        }
        if (n == 1) {
            *x = -sin(b_x);
        } else if (n == -1) {
            *x = sin(b_x);
        } else {
            *x = -cos(b_x);
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void sunVector_test_cosd(\
%assign comma = ""
%<comma>real_T *x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>
%return fcnBuff
%endfunction

